<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todoist Tasks</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #ffffff;
            color: #2d2d2d;
            margin: 0;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        h1 {
            text-align: center;
            color: #e44332;
            margin-bottom: 40px;
        }
        .project-group {
            margin-bottom: 30px;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .project-header {
            font-size: 1.4em;
            color: #2d2d2d;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e44332;
        }
        .task-item {
            background: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 6px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
            transition: transform 0.1s ease;
        }
        .task-item:hover {
            transform: translateX(5px);
        }
        .task-controls {
            display: grid;
            gap: 10px;
            margin-top: 10px;
        }
        input, select, textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            font-size: 14px;
        }
        textarea {
            resize: vertical;
            min-height: 60px;
        }
        .auth-container {
            text-align: center;
            margin: 50px 0;
        }
        .todoist-button {
            background: #e44332;
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            transition: background 0.2s ease;
        }
        .todoist-button:hover {
            background: #c23323;
        }
    </style>
    <!-- Google OAuth Library -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
</head>
<body>
    <div class="auth-container">
        <h1>Todoist Tasks</h1>
        <div id="google-login"></div>
    </div>
    <div id="tasks-container"></div>

    <script>
        const GOOGLE_CLIENT_ID = "YOUR_GOOGLE_CLIENT_ID";
        const TODOIST_CLIENT_ID = "YOUR_TODOIST_CLIENT_ID";
        const TODOIST_CLIENT_SECRET = "YOUR_TODOIST_CLIENT_SECRET";
        const REDIRECT_URI = "http://localhost";

        let todoistAccessToken = null;

        // Initialize Google Login
        function initializeGoogleLogin() {
            google.accounts.id.initialize({
                client_id: GOOGLE_CLIENT_ID,
                callback: handleGoogleLogin,
            });
            google.accounts.id.renderButton(document.getElementById("google-login"), {
                theme: "filled_blue",
                size: "large",
                shape: "pill"
            });
        }

        async function handleGoogleLogin(response) {
            const user = decodeJWT(response.credential);
            console.log("Authenticated as:", user.name);
            authenticateWithTodoist();
        }

        function decodeJWT(token) {
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            return JSON.parse(atob(base64));
        }

        function authenticateWithTodoist() {
            window.location.href = `https://todoist.com/oauth/authorize?client_id=${TODOIST_CLIENT_ID}&scope=data:read_write&state=secret&redirect_uri=${REDIRECT_URI}`;
        }

        async function getTodoistAccessToken(code) {
            try {
                const response = await fetch("https://todoist.com/oauth/access_token", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                    },
                    body: new URLSearchParams({
                        client_id: TODOIST_CLIENT_ID,
                        client_secret: TODOIST_CLIENT_SECRET,
                        code: code,
                        redirect_uri: REDIRECT_URI
                    }),
                });
                const data = await response.json();
                todoistAccessToken = data.access_token;
                loadTodoistData();
            } catch (error) {
                alert(`Authentication failed: ${error.message}`);
            }
        }

        async function loadTodoistData() {
            try {
                const [projectsResponse, tasksResponse] = await Promise.all([
                    fetch("https://api.todoist.com/rest/v2/projects", {
                        headers: { Authorization: `Bearer ${todoistAccessToken}` }
                    }),
                    fetch("https://api.todoist.com/rest/v2/tasks", {
                        headers: { Authorization: `Bearer ${todoistAccessToken}` }
                    })
                ]);

                const projects = await projectsResponse.json();
                const tasks = await tasksResponse.json();
                displayTasks(projects, tasks);
            } catch (error) {
                alert(`Error loading data: ${error.message}`);
            }
        }

        function displayTasks(projects, tasks) {
            const container = document.getElementById('tasks-container');
            container.innerHTML = '';

            // Create a map for quick project lookups
            const projectMap = new Map(projects.map(p => [p.id, p]));

            // Group tasks by project
            const groupedTasks = tasks.reduce((acc, task) => {
                const projectId = task.project_id;
                if (!acc.has(projectId)) acc.set(projectId, []);
                acc.get(projectId).push(task);
                return acc;
            }, new Map());

            // Create project sections
            groupedTasks.forEach((tasks, projectId) => {
                const project = projectMap.get(projectId);
                const section = document.createElement('div');
                section.className = 'project-group';
                section.innerHTML = `
                    <div class="project-header">${project.name}</div>
                    <div class="task-list"></div>
                `;

                const taskList = section.querySelector('.task-list');
                tasks.forEach(task => {
                    const taskElement = createTaskElement(task);
                    taskList.appendChild(taskElement);
                });

                container.appendChild(section);
            });
        }

        function createTaskElement(task) {
            const element = document.createElement('div');
            element.className = 'task-item';
            element.innerHTML = `
                <div class="task-controls">
                    <input type="text" value="${task.content}" 
                           onchange="updateTask('${task.id}', 'content', this.value)">
                    <textarea onchange="updateTask('${task.id}', 'description', this.value)"
                    >${task.description || ''}</textarea>
                    <input type="datetime-local" 
                           value="${task.due?.datetime || ''}" 
                           onchange="updateTask('${task.id}', 'due_datetime', this.value)">
                    <select onchange="updateTask('${task.id}', 'priority', this.value)">
                        ${[1, 2, 3, 4].map(p => 
                            `<option value="${p}" ${task.priority === p ? 'selected' : ''}>
                                Priority ${p}
                            </option>`
                        ).join('')}
                    </select>
                </div>
            `;
            return element;
        }

        async function updateTask(taskId, field, value) {
            try {
                await fetch(`https://api.todoist.com/rest/v2/tasks/${taskId}`, {
                    method: 'POST',
                    headers: {
                        Authorization: `Bearer ${todoistAccessToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ [field]: value })
                });
            } catch (error) {
                alert(`Error updating task: ${error.message}`);
            }
        }

        // Initialization
        window.onload = initializeGoogleLogin;

        // Handle OAuth callback
        const urlParams = new URLSearchParams(window.location.search);
        const code = urlParams.get('code');
        if (code) {
            getTodoistAccessToken(code);
        }
    </script>
</body>
</html>
